There are now three ant libraries:

libant.a : The original ant. This library makes strong assumptions about the
threadedness of the application it is compiled into. It has worked well for a
number of applications, but it also contained a number of bugs. There may or
may not be more bugs. Ant does not play well with others programs, but it
plays nicely with people. It contains some nice useability features, such as
history and arrow keys.

libant_lite.a : A total re-write of ant, designed to interact well with other
programs. It contains no usability features, and probably never will. It is
designed to interoperate with IPC as well -- to use libant_lite, you must
also use IPC. IPC handles detecting new connections, and when a connection is
ready to be read from -- ant sets up its own callbacks and hands these to
IPC. 

Main differences between ant and ant_lite :
ant 
- history and arrow keys on sockets
- threadedness

ant_lite 
- interoperability with IPC
- lower system-call overhead (buffered input)
- ability to mix client and server sockets in the same program
Some concessions to usability: 
- ability to handle STDIN symmetrically with sockets
- auto-help function

libant_lite_noipc.a : 
Basically, the same code as ant_lite with the IPC function calls ifdeffed
out. Instead of using IPC_listen (or IPC_dispatch, etc), to manage
connections, there is an ant_listen() function that can be used instead. 
	
